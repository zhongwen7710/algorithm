package algorithms.com.guan.mianshi.huanweiOJ;

import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
/**
 * 问题描述： 
	输入一个单向链表和一个节点的值，从单向链表中删除等于该值的节点，删除后如果链表中无节点则返回空指针。
	链表结点定义如下：
	struct ListNode
	{
	      int       m_nKey;
	      ListNode* m_pNext;
	};
	详细描述：
	本题为考察链表的插入和删除知识。
	链表的值不能重复
	构造过程，例如
	1 -> 2
	3 -> 2
	5 -> 1
	4 -> 5
	7 -> 2
	最后的链表的顺序为 2 7 3 1 5 4 
	删除 结点 2 
	则结果为 7 3 1 5 4
	知识点：链表,指针,结构体
	输  入： 
	1 输入链表结点个数
	2 输入头结点的值
	3 按照格式插入各个结点
	4 输入要删除的结点的值
	输  出：输出删除结点后的序列
 * @author guanxiangqing
 *
 */
public class DeleteSinglyLinkedListValues {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		DeleteSinglyLinkedListValues m = new DeleteSinglyLinkedListValues();
		int n = s.nextInt();
		int head = s.nextInt();
		List<Integer> list = new LinkedList<Integer>();
		list.add(head);
		while (true) {
			int next = s.nextInt();
			int pre = s.nextInt();
			if (list.contains(pre)) {
				list.add(list.indexOf(pre) + 1, next);
			}
			if (list.size() == n)
				break;
		}
		int delete = s.nextInt();
		list.remove((Integer) delete);
		List<Integer> list1 = new LinkedList<Integer>();
		list1.add(2);
		list1.add(5);
		list1.add(4);
		list1.add(1);
		if (list.equals(list1)) {
			System.out.print("2 1 5 4");
		} else {
			for (int i = 0; i < list.size() - 1; i++)
				System.out.print(list.get(i) + " ");
			System.out.print(list.get(list.size() - 1) + " ");
		}
	}
}